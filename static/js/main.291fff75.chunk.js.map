{"version":3,"sources":["components/Layout/Nav/Nav.js","components/Layout/Header/Header.js","components/Aux/Card/Card.js","components/PostItem/PostItem.js","components/Spinner/Spinner.js","containers/Posts/Posts.js","containers/Posts/FullPost/FullPost.js","components/About/About.js","components/Aux/Container/Container.js","components/Blog/Blog.js","components/App/App.js","serviceWorker.js","index.js","components/Layout/Header/Header.module.css","components/Aux/Card/Card.module.css","components/Spinner/Spinner.module.css"],"names":["nav","props","className","to","exact","header","styles","Header","style","color","card","Card","children","postItem","post","title","author","Date","createdAt","toDateString","body","id","spinner","Spinner","contentful","require","Posts","state","posts","loading","client","createClient","space","accessToken","this","getEntries","content_type","then","res","fetchedPosts","items","map","sys","fields","content","substring","concat","name","setState","catch","error","console","log","length","key","Component","FullPost","formatPostBody","postContent","Text","options","renderNode","BLOCKS","PARAGRAPH","node","renderText","text","split","flatMap","i","documentToReactComponents","postId","match","params","getEntry","entry","fetchedPost","imageUrl","photo","file","url","imageDescription","description","linkedIn","slides","slide","fileName","src","alt","href","size","maxWidth","margin","image","index","about","textAlign","container","blog","path","component","About","App","basename","Blog","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.291fff75.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Nav.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst nav = (props) => {\n  return (\n    <nav className=\"Nav\">\n      <ul>\n        <li>\n          <NavLink to=\"/\" exact>\n            HOME\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\">ABOUT</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default nav;\n","import React from \"react\";\n\nimport Nav from \"../Nav/Nav\";\nimport styles from \"./Header.module.css\";\n\nconst header = (props) => {\n  return (\n    <header>\n      <div className={styles.Header}>\n        <h1>\n          AGILE<span style={{ color: \"#43963f\" }}>UP</span> Blog\n        </h1>\n        <p>\n          Here you can find some really cool articles about Agile Metodology.\n        </p>\n      </div>\n      <Nav />\n    </header>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n\nimport styles from \"./Card.module.css\";\n\nconst card = (props) => {\n  return <div className={styles.Card}>{props.children}</div>;\n};\n\nexport default card;\n","import React from \"react\";\n\nimport Card from \"../Aux/Card/Card\";\nimport { Link } from \"react-router-dom\";\n\nimport { FaAt, FaCalendarAlt } from \"react-icons/fa\";\n\nimport \"./PostItem.css\";\n\nconst postItem = (props) => {\n  return (\n    <Card>\n      <h2 className=\"post__title\">{props.post.title}</h2>\n      <div className=\"post__metadata\">\n        <span className=\"icon\">\n          <FaAt />\n        </span>\n        {props.post.author}\n      </div>\n      <div className=\"post__metadata\">\n        <span className=\"icon\">\n          <FaCalendarAlt />\n        </span>\n        {new Date(props.post.createdAt).toDateString()}\n      </div>\n      <p className=\"post__intro\">{props.post.body}</p>\n      <Link className=\"btn btn--right\" to={\"/posts/\" + props.post.id}>\n        Read More\n      </Link>\n    </Card>\n  );\n};\n\nexport default postItem;\n","import React from \"react\";\n\nimport styles from \"./Spinner.module.css\";\n\nconst spinner = (props) => {\n  return <div className={styles.Spinner}>Loading...</div>;\n};\n\nexport default spinner;\n","import React, { Component, Fragment } from \"react\";\n\nimport PostItem from \"../../components/PostItem/PostItem\";\nimport Card from \"../../components/Aux/Card/Card\";\n\nimport Spinner from \"../../components/Spinner/Spinner\";\n\nconst contentful = require(\"contentful\");\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      loading: true,\n    };\n\n    this.client = contentful.createClient({\n      space: \"5ewpe53pwxis\",\n      accessToken: \"Xerq7AgfY3obWybUXHTuhYnXSNUa5aHgd3l5SQnY-jk\",\n    });\n  }\n\n  componentDidMount() {\n    this.client\n      .getEntries({\n        content_type: \"blogPost\",\n      })\n      .then((res) => {\n        const fetchedPosts = res.items.map((post) => {\n          return {\n            id: post.sys.id,\n            title: post.fields.title,\n            body: post.fields.content.substring(0, 250).concat(\" ...\"),\n            author: post.fields.author.fields.name,\n            createdAt: post.sys.createdAt,\n          };\n        });\n        this.setState({ posts: fetchedPosts, loading: false });\n      })\n      .catch((error) => {\n        this.setState({\n          loading: false,\n        });\n        console.log(\"Something wrong happened\", error);\n      });\n  }\n\n  render() {\n    let posts = (\n      <Card>\n        <Spinner />\n      </Card>\n    );\n\n    if (!this.state.loading) {\n      if (this.state.posts.length) {\n        posts = this.state.posts.map((post) => (\n          <PostItem post={post} key={post.id} />\n        ));\n      } else {\n        posts = (\n          <Card>\n            <p>No posts available</p>\n          </Card>\n        );\n      }\n    }\n\n    return <Fragment>{posts}</Fragment>;\n  }\n}\n\nexport default Posts;\n","import React, { Component, Fragment } from \"react\";\n\nimport Card from \"../../../components/Aux/Card/Card\";\nimport Spinner from \"../../../components/Spinner/Spinner\";\nimport { Carousel } from \"react-responsive-carousel\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { FaCalendar, FaLinkedinIn } from \"react-icons/fa\";\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\";\nimport { BLOCKS } from \"@contentful/rich-text-types\";\n\nimport \"./FullPost.css\";\n\nconst contentful = require(\"contentful\");\n\nclass FullPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: null,\n      loading: true,\n    };\n\n    this.client = contentful.createClient({\n      space: \"5ewpe53pwxis\",\n      accessToken: \"Xerq7AgfY3obWybUXHTuhYnXSNUa5aHgd3l5SQnY-jk\",\n    });\n  }\n\n  componentDidMount() {\n    const postId = this.props.match.params.id;\n\n    this.client\n      .getEntry(postId)\n      .then((entry) => {\n        const fetchedPost = {\n          title: entry.fields.title,\n          content: entry.fields.content,\n          body: entry.fields.body,\n          author: {\n            name: entry.fields.author.fields.name,\n            imageUrl: entry.fields.author.fields.photo.fields.file.url,\n            imageDescription:\n              entry.fields.author.fields.photo.fields.description,\n            linkedIn: entry.fields.author.fields.linkedIn,\n          },\n          createdAt: new Date(entry.sys.createdAt).toDateString(),\n          slides: entry.fields.slides.map((slide) => {\n            return {\n              url: slide.fields.file.url,\n              description: slide.fields.file.fileName,\n            };\n          }),\n        };\n\n        this.setState({ post: fetchedPost, loading: false });\n      })\n      .catch((error) => {\n        this.setState({\n          loading: false,\n        });\n        console.log(\"Something wrong happened\", error);\n      });\n  }\n\n  formatPostBody = (postContent) => {\n    const Text = ({ children }) => <p>{children}</p>;\n\n    const options = {\n      renderNode: {\n        [BLOCKS.PARAGRAPH]: (node, children) => <Text>{children}</Text>,\n      },\n      renderText: (text) =>\n        text.split(\"\\n\").flatMap((text, i) => [i > 0 && <br />, text]),\n    };\n\n    return documentToReactComponents(postContent, options);\n  };\n\n  render() {\n    let content = <Spinner />;\n\n    if (!this.state.loading) {\n      if (this.state.post) {\n        content = (\n          <Fragment>\n            <div className=\"post__metadata\">\n              <span className=\"icon\">\n                <FaCalendar /> {this.state.post.createdAt}\n              </span>\n            </div>\n            <h1 className=\"post__title\">{this.state.post.title}</h1>\n            <div className=\"post__author\">\n              <img\n                className=\"author__photo\"\n                src={this.state.post.author.imageUrl}\n                alt={this.state.post.author.imageDescription}\n              />\n              <div className=\"author__metadata\">\n                <p>{this.state.post.author.name}</p>\n                <div className=\"author__icons\">\n                  <a\n                    href={this.state.post.author.linkedIn}\n                    className=\"icon__link\"\n                  >\n                    <FaLinkedinIn size=\"1.7em\" title=\"LinkedIn Profile\" />\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            <p className=\"post__body\">\n              {this.formatPostBody(this.state.post.body)}\n            </p>\n\n            <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\n              <Carousel>\n                {this.state.post.slides.map((image, index) => (\n                  <div key={index}>\n                    <img src={image.url} alt={image.description} />\n                  </div>\n                ))}\n              </Carousel>\n            </div>\n          </Fragment>\n        );\n      } else {\n        content = <p style={{ color: \"red\" }}>Something went wrong</p>;\n      }\n    }\n\n    return <Card>{content}</Card>;\n  }\n}\n\nexport default FullPost;\n","import React from \"react\";\n\nimport Card from \"../../components/Aux/Card/Card\";\n\nconst about = (props) => {\n  return (\n    <Card>\n      <h1>About Agile Up</h1>\n\n      <div style={{ textAlign: \"left\" }}>\n        <p>Maybe here we can put some information about Agile UP.</p>\n\n        <p>If you think this section is not necessary we can just delete it.</p>\n      </div>\n    </Card>\n  );\n};\n\nexport default about;\n","import React from \"react\";\n\nimport \"./Container.css\";\n\nconst container = (props) => {\n  return <div className=\"container\">{props.children}</div>;\n};\n\nexport default container;\n","import React, { Fragment } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport Header from \"../Layout/Header/Header\";\nimport Posts from \"../../containers/Posts/Posts\";\nimport FullPost from \"../../containers/Posts/FullPost/FullPost\";\nimport About from \"../About/About\";\nimport Container from \"../Aux/Container/Container\";\n\nconst blog = () => {\n  return (\n    <Fragment>\n      <Header />\n      <Container>\n        <Route path=\"/\" exact component={Posts} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/posts/:id\" component={FullPost} />\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default blog;\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport Blog from \"../Blog/Blog\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Blog />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3w3i_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__UhVmd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__24ERy\",\"load8\":\"Spinner_load8__1FLaS\"};"],"sourceRoot":""}